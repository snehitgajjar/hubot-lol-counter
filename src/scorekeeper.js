// Generated by CoffeeScript 1.6.3
(function() {
  var ScoreKeeper;

  ScoreKeeper = (function() {
    function ScoreKeeper(robot) {
      var storageLoaded,
        _this = this;
      this.robot = robot;
      storageLoaded = function() {
        var _base;
        _this.storage = (_base = _this.robot.brain.data).plusPlus || (_base.plusPlus = {
          scores: {},
          log: {},
          reasons: {},
          last: {}
        });
        if (typeof _this.storage.last === "string") {
          _this.storage.last = {};
        }
        return _this.robot.logger.debug("Plus Plus Data Loaded: " + JSON.stringify(_this.storage, null, 2));
      };
      this.robot.brain.on("loaded", storageLoaded);
      storageLoaded();
    }

    ScoreKeeper.prototype.getUser = function(from) {
      var _base;
      (_base = this.storage.scores)[from] || (_base[from] = 0);
      return from;
    };

    ScoreKeeper.prototype.saveScoreLog = function(from, room, reason) {
      if (typeof this.storage.log[from] !== "object") {
        this.storage.log[from] = {};
      }
      this.storage.log[from]['lol'] = new Date();
      return this.storage.last[room] = {
        from: from,
        reason: reason
      };
    };

    ScoreKeeper.prototype.saveUser = function(from, room, reason) {
      this.saveScoreLog(from, room, reason);
      this.robot.brain.save();
      return [from, this.storage.scores[from]];
    };

    ScoreKeeper.prototype.add = function(from, room, reason) {
      var user;
      if (this.validate("lol", from)) {
        user = this.getUser(from);
        this.storage.scores[user]++;
        return this.saveUser(from, room, reason);
      } else {
        return [null, null];
      }
    };

    ScoreKeeper.prototype.subtract = function(user, from, room, reason) {
      var _base, _base1;
      if (this.validate(user, from)) {
        user = this.getUser(user);
        this.storage.scores[user]--;
        (_base = this.storage.reasons)[user] || (_base[user] = {});
        if (reason) {
          (_base1 = this.storage.reasons[user])[reason] || (_base1[reason] = 0);
          this.storage.reasons[user][reason]--;
        }
        return this.saveUser(user, from, room, reason);
      } else {
        return [null, null];
      }
    };

    ScoreKeeper.prototype.erase = function(user, from, room, reason) {
      user = this.getUser(user);
      if (reason) {
        delete this.storage.reasons[user][reason];
        this.saveUser(user, from.name, room);
        return true;
      } else {
        delete this.storage.scores[user];
        delete this.storage.reasons[user];
        return true;
      }
      return false;
    };

    ScoreKeeper.prototype.scoreForUser = function(user) {
      user = this.getUser(user);
      return this.storage.scores[user];
    };

    ScoreKeeper.prototype.reasonsForUser = function(user) {
      user = this.getUser(user);
      return this.storage.reasons[user];
    };

    ScoreKeeper.prototype.saveScoreLog = function(from, room, reason) {
      if (typeof this.storage.log[from] !== "object") {
        this.storage.log[from] = {};
      }
      this.storage.log[from]['lol'] = new Date();
      return this.storage.last[room] = {
        from: from,
        reason: reason
      };
    };

    ScoreKeeper.prototype.last = function(room) {
      var last;
      last = this.storage.last[room];
      if (typeof last === 'string') {
        return [last, ''];
      } else {
        return [last.user, last.reason];
      }
    };

    ScoreKeeper.prototype.isSpam = function(user, from) {
      var date, dateSubmitted, messageIsSpam, _base;
      (_base = this.storage.log)[from] || (_base[from] = {});
      if (!this.storage.log[from][user]) {
        return false;
      }
      dateSubmitted = this.storage.log[from][user];
      date = new Date(dateSubmitted);
      messageIsSpam = date.setSeconds(date.getSeconds() + 5) > new Date();
      if (!messageIsSpam) {
        delete this.storage.log[from][user];
      }
      return messageIsSpam;
    };

    ScoreKeeper.prototype.validate = function(user, from) {
      return user !== from && user !== "" && !this.isSpam(user, from);
    };

    ScoreKeeper.prototype.length = function() {
      return this.storage.log.length;
    };

    ScoreKeeper.prototype.top = function(amount) {
      var name, score, tops, _ref;
      tops = [];
      _ref = this.storage.scores;
      for (name in _ref) {
        score = _ref[name];
        tops.push({
          name: name,
          score: score
        });
      }
      return tops.sort(function(a, b) {
        return b.score - a.score;
      }).slice(0, amount);
    };

    ScoreKeeper.prototype.bottom = function(amount) {
      var all;
      all = this.top(this.storage.scores.length);
      return all.sort(function(a, b) {
        return b.score - a.score;
      }).reverse().slice(0, amount);
    };

    ScoreKeeper.prototype.normalize = function(fn) {
      var scores;
      scores = {};
      _.each(this.storage.scores, function(score, name) {
        scores[name] = fn(score);
        if (scores[name] === 0) {
          return delete scores[name];
        }
      });
      this.storage.scores = scores;
      return this.robot.brain.save();
    };

    return ScoreKeeper;

  })();

  module.exports = ScoreKeeper;

}).call(this);
