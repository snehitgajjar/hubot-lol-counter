// Generated by CoffeeScript 1.6.3
(function() {
  var ScoreKeeper, clark, querystring, _;

  _ = require('underscore');

  clark = require('clark');

  querystring = require('querystring');

  ScoreKeeper = require('./scorekeeper');

  module.exports = function(robot) {
    var reasonConjunctions, reasonsKeyword, scoreKeeper, scoreKeyword;
    scoreKeeper = new ScoreKeeper(robot);
    scoreKeyword = process.env.HUBOT_PLUSPLUS_KEYWORD || 'score';
    reasonsKeyword = process.env.HUBOT_PLUSPLUS_REASONS || 'raisins';
    reasonConjunctions = process.env.HUBOT_PLUSPLUS_CONJUNCTIONS || 'for|because|cause|cuz|as';
    robot.hear(/^(.*?(\blol\b)[^$]*)$/i, function(msg) {
      var from, lolWord, message, reason, reasonScore, room, test, userName, _ref, _ref1;
      _ref = msg.match, reason = _ref[0], lolWord = _ref[1];
      from = msg.message.user.name.toLowerCase();
      room = msg.message.room;
      console.log("Hello, " + lolWord + "!");
      test = lolWord === "lol";
      console.log("Hello1, " + test + "!");
      _ref1 = lolWord.toLowerCase() === "lol" ? scoreKeeper.add(from, room, reason) : void 0, userName = _ref1[0], reasonScore = _ref1[1];
      if (reasonScore != null) {
        message = reasonScore === 1 ? "" + msg.message.user.name + ": " + reasonScore : "" + msg.message.user.name + ": " + reasonScore;
        return msg.send(message);
      }
    });
    robot.respond(/(?:erase)([\s\w'@.-:\u3040-\u30FF\uFF01-\uFF60\u4E00-\u9FA0]*)(?:\s+(?:for|because|cause|cuz)\s+(.+))?$/i, function(msg) {
      var erased, from, isAdmin, message, name, reason, room, user, __, _ref, _ref1, _ref2;
      _ref = msg.match, __ = _ref[0], name = _ref[1], reason = _ref[2];
      from = msg.message.user.name.toLowerCase();
      user = msg.envelope.user;
      room = msg.message.room;
      reason = reason != null ? reason.trim().toLowerCase() : void 0;
      if (name) {
        if (name.charAt(0) === ':') {
          name = (name.replace(/(^\s*@)|([,\s]*$)/g, '')).trim().toLowerCase();
        } else {
          name = (name.replace(/(^\s*@)|([,:\s]*$)/g, '')).trim().toLowerCase();
        }
      }
      isAdmin = ((_ref1 = this.robot.auth) != null ? _ref1.hasRole(user, 'plusplus-admin') : void 0) || ((_ref2 = this.robot.auth) != null ? _ref2.hasRole(user, 'admin') : void 0);
      if ((this.robot.auth == null) || isAdmin) {
        erased = scoreKeeper.erase(name, from, room, reason);
      } else {
        return msg.reply("Sorry, you don't have authorization to do that.");
      }
      if (erased != null) {
        message = reason != null ? "Erased the following reason from " + name + ": " + reason : "Erased points for " + name;
        return msg.send(message);
      }
    });
    robot.respond(new RegExp("(?:" + scoreKeyword + ") (for\s)?(.*)", "i"), function(msg) {
      var name, reasonString, reasons, score;
      name = msg.match[2].trim().toLowerCase();
      if (name) {
        if (name.charAt(0) === ':') {
          name = name.replace(/(^\s*@)|([,\s]*$)/g, '');
        } else {
          name = name.replace(/(^\s*@)|([,:\s]*$)/g, '');
        }
      }
      console.log(name);
      score = scoreKeeper.scoreForUser(name);
      reasons = scoreKeeper.reasonsForUser(name);
      reasonString = typeof reasons === 'object' && Object.keys(reasons).length > 0 ? ("" + name + " has " + score + " points. Here are some " + reasonsKeyword + ":") + _.reduce(reasons, function(memo, val, key) {
        return memo += "\n" + key + ": " + val + " points";
      }, "") : "" + name + " has " + score + " points.";
      return msg.send(reasonString);
    });
    robot.respond(/(top|bottom) (\d+)/i, function(msg) {
      var amount, graphSize, i, message, tops, _i, _ref;
      amount = parseInt(msg.match[2]) || 10;
      message = [];
      tops = scoreKeeper[msg.match[1]](amount);
      if (tops.length > 0) {
        for (i = _i = 0, _ref = tops.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          message.push("" + (i + 1) + ". " + tops[i].name + " : " + tops[i].score);
        }
      } else {
        message.push("No scores to keep track of yet!");
      }
      if (msg.match[1] === "top") {
        graphSize = Math.min(tops.length, Math.min(amount, 20));
        message.splice(0, 0, clark(_.first(_.pluck(tops, "score"), graphSize)));
      }
      return msg.send(message.join("\n"));
    });
    robot.router.get("/" + robot.name + "/normalize-points", function(req, res) {
      scoreKeeper.normalize(function(score) {
        if (score > 0) {
          score = score - Math.ceil(score / 10);
        } else if (score < 0) {
          score = score - Math.floor(score / 10);
        }
        return score;
      });
      return res.end(JSON.stringify('done'));
    });
    return robot.router.get("/" + robot.name + "/scores", function(req, res) {
      var amount, direction, obj, query, tops;
      query = querystring.parse(req._parsedUrl.query);
      if (query.name) {
        obj = {};
        obj[query.name] = scoreKeeper.scoreForUser(query.name);
        return res.end(JSON.stringify(obj));
      } else {
        direction = query.direction || "top";
        amount = query.limit || 10;
        tops = scoreKeeper[direction](amount);
        return res.end(JSON.stringify(tops, null, 2));
      }
    });
  };

}).call(this);
